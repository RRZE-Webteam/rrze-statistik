{"version":3,"file":"highchartsIndex.js","mappings":";;;;;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAbA;AAeA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAZA;AAcA;AACA;AACA;;;;;;;;;;AC3CA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AAGA;AACA;AAcA;;AAGA;AACA;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AASA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AAPA;AAUA;AACA;AADA;AAIA;AACA;AACA;AADA;AADA;AAMA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AADA;AADA;AAlEA;;AAyEA;AAAA;AAIA;AACA;AACA;AACA;AACA;;;;;;;;;;ACzJA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AAFA;AADA;AASA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AALA;AA5BA;;AAuCA;;;;;;;;;;;;ACvCA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA","sources":["webpack://rrze-statistik/./src/highcharts/ajax.js","webpack://rrze-statistik/./src/highcharts/highcharts.js","webpack://rrze-statistik/./src/highcharts/themes/theme.js","webpack://rrze-statistik/./assets/sass/style.scss","webpack://rrze-statistik/webpack/bootstrap","webpack://rrze-statistik/webpack/runtime/compat get default export","webpack://rrze-statistik/webpack/runtime/define property getters","webpack://rrze-statistik/webpack/runtime/hasOwnProperty shorthand","webpack://rrze-statistik/webpack/runtime/make namespace object","webpack://rrze-statistik/./src/highcharts/index.js"],"sourcesContent":["jQuery(function($){\n\tlet selector = '';\n\t// the Configure link click event\n\t$('[id^=\"rrze_statistik_widget\"] .edit-box.open-box').click(function(){\n\t\tvar button = $(this);\n\t\tselector = $(this).parent().parent().parent().parent().attr('id');\n\t\t$.ajax({\n\t\t\turl: ajaxurl, // it is predefined in /wp-admin/\n\t\t\ttype: 'POST',\n\t\t\tdata: 'action=showform',\n\t\t\tbeforeSend : function( xhr ){\n\t\t\t\t// add preloader\n\t\t\t\tbutton.hide().before('<span class=\"spinner\" style=\"visibility:visible;display:block;margin:0 0 0 15px\"></span>');\n\t\t\t},\n\t\t\tsuccess : function( data ){\n\t\t\t\t// remove preloader\n\t\t\t\tbutton.prev().remove();\n\t\t\t\t// insert settings form\n\t\t\t\t$('#' + selector).find('.inside').html(data);\n\t\t\t}\n\t\t});\n\t\treturn false;\n\t});\n\t\t\n\t// form submit event\n\t$('body').on('submit', '#rrze_statistik_settings', function(){\n\t\tvar form = $(this);\n\t\t$.ajax({\n\t\t\turl: ajaxurl,\n\t\t\ttype: 'POST',\n\t\t\tdata: $(this).serialize() + `&selector=${selector}`, // all form fields\n\t\t\tbeforeSend : function( xhr ){\n\t\t\t\t// add preloader just after the submit button\n\t\t\t\tform.find('.submit').append('<span class=\"spinner\" style=\"display:inline-block;float:none;visibility:visible;margin:0 0 0 15px\"></span>');\n\t\t\t},\n\t\t\tsuccess : function( data ){\n\t\t\t\t$('[id^=\"rrze_statistik_widget\"]').find('.inside').html(data);\n\t\t\t\t// show the Configure link again\n\t\t\t\t$('[id^=\"rrze_statistik_widget\"] .edit-box.open-box').show();\n\t\t\t}\n\t\t});\n\t\treturn false;\n\t});\n});","let currentYear = new Date().getFullYear();\nconsole.log( RRZESTATISTIKTRANSFER.linechartDataset );\n\n//data is passed from Transfer.php\ndocument.addEventListener(\"DOMContentLoaded\", function (event) {\n    //Check if data was passed from PHP\n    if (RRZESTATISTIKTRANSFER.linechartDataset === \"undefined\") {\n        return;\n    } else {\n        //read needed charts from dom\n        dataTypes = [\"visits\", \"hits\", \"hosts\", \"files\", \"kbytes\"];\n        chartTypes = [];\n\n        dataTypes.forEach( dataType => {\n            if (document.getElementById(dataType)) {\n                chartTypes.push(dataType);\n            }\n        });\n\n        //Process dataset and split it based on the last three years\n        const firstYear = currentYear - 2;\n        const secondYear = currentYear - 1;\n        const thirdYear = currentYear;\n        \n        //Create the dataset for each datatype\n        chartTypes.forEach((datatype) => {\n            let filterData = (dataset, year) => {\n                let output = dataset.filter((data) => {\n                    return data.year === year.toString();\n                });\n                return output;\n            };\n            let outputThirdYear = filterData(RRZESTATISTIKTRANSFER.linechartDataset, thirdYear);\n            let outputSecondYear = filterData(RRZESTATISTIKTRANSFER.linechartDataset, secondYear);\n            let outputFirstYear = filterData(RRZESTATISTIKTRANSFER.linechartDataset, firstYear);\n\n            //Create an empty dataset array\n            let generateDatasets = (dataset) => {\n                let datasetDummy = [\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                ];\n                let datasetOutput = datasetDummy;\n\n                //Fill the empty Array with the length of 12 (one for each month)\n                dataset.forEach((data) => {\n                    datasetOutput[parseInt(data.month) - 1] = parseInt(\n                        data[datatype]\n                    );\n                });\n                return datasetOutput;\n            };\n\n            //Create three arrays, one for each year\n            let datasetFirstYear = generateDatasets(outputFirstYear);\n            let datasetSecondYear = generateDatasets(outputSecondYear);\n            let datasetThirdYear = generateDatasets(outputThirdYear);\n\n            //Load the theme colors\n            var colors = Highcharts.getOptions().colors;\n\n            //Create the Highcharts container for each datatype\n            const chart = Highcharts.chart(datatype, {\n                chart: {\n                    type: RRZESTATISTIKTRANSFER.displayType,\n                    renderTo: datatype,\n                },\n\n                legend: {\n                    symbolWidth: 40,\n                },\n\n                title: {\n                    text: RRZESTATISTIKTRANSFER.languagePackage[datatype].headline_chart,\n                },\n\n                yAxis: {\n                    title: {\n                        text: RRZESTATISTIKTRANSFER.languagePackage[datatype].ordinate_desc,\n                    },\n                    accessibility: {\n                        description: RRZESTATISTIKTRANSFER.languagePackage[datatype].ordinate_desc,\n                    },\n                },\n\n                xAxis: {\n                    title: {\n                        text: RRZESTATISTIKTRANSFER.abscissaTitle,\n                    },\n                    accessibility: {\n                        description: RRZESTATISTIKTRANSFER.a11yAbscissa,\n                    },\n                    categories: RRZESTATISTIKTRANSFER.abscissaDescriptiontext,\n                },\n\n                tooltip: {\n                    valueSuffix: ` ${RRZESTATISTIKTRANSFER.languagePackage[datatype].ordinate_desc}`,\n                },\n\n                plotOptions: {\n                    series: {\n                        cursor: \"pointer\",\n                    },\n                },\n\n                series: [\n                    {\n                        name: firstYear.toString(),\n                        data: datasetFirstYear,\n                        color: colors[4],\n                        zIndex: 0,\n                    },\n                    {\n                        name: secondYear.toString(),\n                        data: datasetSecondYear,\n                        zIndex: 1,\n                        dashStyle: \"ShortDashDot\",\n                        color: colors[1],\n                    },\n                    {\n                        name: thirdYear.toString(),\n                        data: datasetThirdYear,\n                        zIndex: 2,\n                        dashStyle: \"ShortDot\",\n                        color: colors[2],\n                    },\n                ],\n                //define the Export value\n                exporting: {\n                    csv: {\n                        dateFormat: \"%Y-%m-%d\",\n                    },\n                },\n            });\n            //Target the copy to clipboard button within the dashboard\n            document\n                .getElementById(datatype + \"-getcsv\")\n                //Add an onclick listener which stores the CSV information of the chart inside the clipboard.\n                .addEventListener(\"click\", function () {\n                    navigator.clipboard.writeText(chart.getCSV());\n                });\n        });\n    }\n});\n","Highcharts.theme = {\n    navigator: {\n        series: {\n            color: '#5f98cf',\n            lineColor: '#5f98cf'\n        },\n    },\n    chart: {\n        backgroundColor: {\n            linearGradient: [0, 0, 500, 500],\n            stops: [\n                [0, 'rgb(255, 255, 255)'],\n                [1, 'rgb(255, 255, 255)']\n            ]\n        },\n    },\n    title: {\n        style: {\n            color: '#000',\n            font: 'bold 1rem \"Roboto\", Verdana, sans-serif'\n        }\n    },\n    subtitle: {\n        style: {\n            color: '#666666',\n            font: 'bold 12px \"Roboto MS\", Verdana, sans-serif'\n        }\n    },\n    legend: {\n        itemStyle: {\n            font: '9pt Roboto MS, Verdana, sans-serif',\n            color: 'black'\n        },\n        itemHoverStyle:{\n            color: 'gray'\n        }\n    }\n};\n// Apply the theme\nHighcharts.setOptions(Highcharts.theme);","// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"../../assets/sass/style.scss\";\nimport \"./highcharts.js\";\nimport \"./themes/theme.js\";\n\nimport \"./ajax.js\";"],"names":[],"sourceRoot":""}