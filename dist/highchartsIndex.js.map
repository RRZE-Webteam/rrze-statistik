{"version":3,"file":"highchartsIndex.js","mappings":"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","sources":["webpack://rrze-statistik/./src/highcharts/highcharts.js","webpack://rrze-statistik/./src/highcharts/themes/theme.js","webpack://rrze-statistik/webpack/bootstrap","webpack://rrze-statistik/webpack/runtime/compat get default export","webpack://rrze-statistik/webpack/runtime/define property getters","webpack://rrze-statistik/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["let currentYear = new Date().getFullYear();\nconst datatypes = dataType;\n\n//data is passed from Transfer.php\n//Check if document is ready\ndocument.addEventListener(\"DOMContentLoaded\", function (event) {\n    //Check if data was passed from PHP\n    if (linechartDataset === \"undefined\") {\n        console.log(\"Data could not be retrieved\");\n    } else {\n        //Process dataset and split it based on the last three years\n        console.log(\"Dataset successfully loaded\");\n\n        const firstYear = currentYear - 2;\n        const secondYear = currentYear - 1;\n        const thirdYear = currentYear;\n\n        console.log(linechartDataset);\n        \n        //Create the dataset for each datatype\n        datatypes.forEach((datatype) => {\n            let filterData = (dataset, year) => {\n                let output = dataset.filter((data) => {\n                    return data.year === year.toString();\n                });\n                return output;\n            };\n            let outputThirdYear = filterData(linechartDataset, thirdYear);\n            let outputSecondYear = filterData(linechartDataset, secondYear);\n            let outputFirstYear = filterData(linechartDataset, firstYear);\n\n            //Create an empty dataset array\n            let generateDatasets = (dataset) => {\n                let datasetDummy = [\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                ];\n                let datasetOutput = datasetDummy;\n\n                //Fill the empty Array with the length of 12 (one for each month)\n                dataset.forEach((data) => {\n                    datasetOutput[parseInt(data.month) - 1] = parseInt(\n                        data[datatype]\n                    );\n                });\n                return datasetOutput;\n            };\n\n            //Create three arrays, one for each year\n            let datasetFirstYear = generateDatasets(outputFirstYear);\n            let datasetSecondYear = generateDatasets(outputSecondYear);\n            let datasetThirdYear = generateDatasets(outputThirdYear);\n\n            //Load the theme colors\n            var colors = Highcharts.getOptions().colors;\n\n            //Create the Highcharts container for each datatype\n            const chart = Highcharts.chart(datatype, {\n                chart: {\n                    type: displayType,\n                    renderTo: datatype,\n                },\n\n                legend: {\n                    symbolWidth: 40,\n                },\n\n                title: {\n                    text: languagePackage[datatype].headline_chart,\n                },\n\n                yAxis: {\n                    title: {\n                        text: languagePackage[datatype].ordinate_desc,\n                    },\n                    accessibility: {\n                        description: languagePackage[datatype].ordinate_desc,\n                    },\n                },\n\n                xAxis: {\n                    title: {\n                        text: abscissaTitle,\n                    },\n                    accessibility: {\n                        description: a11yAbscissa,\n                    },\n                    categories: abscissaDescriptiontext,\n                },\n\n                tooltip: {\n                    valueSuffix: ` ${languagePackage[datatype].ordinate_desc}`,\n                },\n\n                plotOptions: {\n                    series: {\n                        cursor: \"pointer\",\n                    },\n                },\n\n                series: [\n                    {\n                        name: firstYear.toString(),\n                        data: datasetFirstYear,\n                        color: colors[4],\n                        zIndex: 0,\n                    },\n                    {\n                        name: secondYear.toString(),\n                        data: datasetSecondYear,\n                        zIndex: 1,\n                        dashStyle: \"ShortDashDot\",\n                        color: colors[1],\n                    },\n                    {\n                        name: thirdYear.toString(),\n                        data: datasetThirdYear,\n                        zIndex: 2,\n                        dashStyle: \"ShortDot\",\n                        color: colors[2],\n                    },\n                ],\n                //define the Export value\n                exporting: {\n                    csv: {\n                        dateFormat: \"%Y-%m-%d\",\n                    },\n                },\n            });\n            //Target the copy to clipboard button within the dashboard\n            document\n                .getElementById(datatype + \"-getcsv\")\n                //Add an onclick listener which stores the CSV information of the chart inside the clipboard.\n                .addEventListener(\"click\", function () {\n                    navigator.clipboard.writeText(chart.getCSV());\n                });\n        });\n    }\n});\n","Highcharts.theme = {\n    navigator: {\n        series: {\n            color: '#5f98cf',\n            lineColor: '#5f98cf'\n        },\n    },\n    chart: {\n        backgroundColor: {\n            linearGradient: [0, 0, 500, 500],\n            stops: [\n                [0, 'rgb(255, 255, 255)'],\n                [1, 'rgb(255, 255, 255)']\n            ]\n        },\n    },\n    title: {\n        style: {\n            color: '#000',\n            font: 'bold 1rem \"Roboto\", Verdana, sans-serif'\n        }\n    },\n    subtitle: {\n        style: {\n            color: '#666666',\n            font: 'bold 12px \"Roboto MS\", Verdana, sans-serif'\n        }\n    },\n    legend: {\n        itemStyle: {\n            font: '9pt Roboto MS, Verdana, sans-serif',\n            color: 'black'\n        },\n        itemHoverStyle:{\n            color: 'gray'\n        }\n    }\n};\n// Apply the theme\nHighcharts.setOptions(Highcharts.theme);","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"names":["currentYear","Date","getFullYear","datatypes","dataType","document","addEventListener","event","linechartDataset","console","log","firstYear","secondYear","thirdYear","forEach","datatype","filterData","dataset","year","filter","data","toString","outputThirdYear","outputSecondYear","generateDatasets","datasetOutput","parseInt","month","datasetFirstYear","datasetSecondYear","datasetThirdYear","colors","Highcharts","getOptions","chart","type","displayType","renderTo","legend","symbolWidth","title","text","languagePackage","headline_chart","yAxis","ordinate_desc","accessibility","description","xAxis","abscissaTitle","a11yAbscissa","categories","abscissaDescriptiontext","tooltip","valueSuffix","plotOptions","series","cursor","name","color","zIndex","dashStyle","exporting","csv","dateFormat","getElementById","navigator","clipboard","writeText","getCSV","theme","lineColor","backgroundColor","linearGradient","stops","style","font","subtitle","itemStyle","itemHoverStyle","setOptions","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call"],"sourceRoot":""}